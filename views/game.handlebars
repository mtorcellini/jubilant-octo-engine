<h1>Â¡game!</h1>

<button id="makeNew">Start New Game</button>

{{#if isNewgame}}
  <p id="idText">You've started a new game with id: <span id="gameIdSpan"></span></p>
  {{else}}
    <p id="idText">Welcome to game with id: <span id="gameIdSpan"></span></p>
{{/if}}

<button id="test">Test Function</button>

{{> gameboard}}

{{!-- <p>Choose your GamePiece</p>
<div class="playerToken" data="x">x</div>
<div class="playerToken" data="o">o</div> --}}

<script
  src="https://code.jquery.com/jquery-3.6.0.min.js"
  integrity="sha256-/xUj+3OJU5yExlq6GSYGSHk7tPXikynS7ogEvDej/m4="
  crossorigin="anonymous"></script>

<script>
$(document).ready(() => {

  // initialize empty game state
  let gameState = {
    x : [],
    o : []
  };
  let gameId;
  let playerToken = "o";

  // hide gameboard initially
  //$('#gameboard').hide();

  // hide idText initially
  //$('#idText').hide();

  // function for making a new Game, server sets a session var with current game ID
  const makeNewGame = () => {
    fetch('/api/game', {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
      }
    })
    .then(response => response.json())
    .then(response => {

      // set gameId according to response
      gameId = response.id;
      playerToken = "x";

      // show id text
      $('#gameIdSpan').text(gameId);
      $('#idText').show();

      // show gameboard
      $('#gameboard').show();

      // hide startgame button
      $('#makeNew').hide();
    })
  }


  // function for getting the state of a game
  const getGameData = () => {

    // fetch game state by id, server's session vars gets correct game
    fetch(`/api/game`)
      .then(response => response.json())
      .then(response => {
        const gameState = response.state;
        console.log('gameState', gameState);
        // mark squares according to gamestate
        markSquares(response.state);

        // display game ID
        $('#gameIdSpan').text(response.id);
        $('#idText').show();
      })
  }

  // function for coloring the squares
  const markSquares = data => {
    if (data.x) {
      data.x.forEach(xmark => {
        const xCoord = xmark[0];
        const yCoord = xmark[1];
        $(`.row${yCoord} .col${xCoord}`).css({ background: "darkblue", color: "white" }).text("X");
      });
    }
    if (data.o) {
      data.o.forEach(omark => {
        const xCoord = omark[0];
        const yCoord = omark[1];
        $(`.row${yCoord} .col${xCoord}`).css({ background: "purple", color: "white" }).text("O");
      })
    }
  }

  // function for submitting data of a new move 
  const makeMove = (gameState) => {

    // send gameState to server
    fetch(`/api/game`, {
      method: 'PUT',
      headers: {
        'Content-Type': 'application/json',
      },
      body: JSON.stringify(gameState)
    })

      // get newest data from server and mark squares
      .then(() => {
        getGameData();
      })
  }

  // function for choosing a game token and updating the database
  // right now the server is setting the game creator to x and the joiner to o
  /*
  $(".playerToken").on("click", async (event) => {
    playerToken = event.target.getAttribute("data");

    const userData = {
      token : playerToken
    }

    fetch('/api/user', {
      method: 'PUT',
      headers: {
        'Content-Type': 'application/json',
      },
      body: JSON.stringify(userData)
    })
    .then(response => response.json())
    .then(response => {
      console.log(response);
    })

  })
  */


  // click listener on gameboard
  $("#gameboard").on("click", async (event) => {
    const xcoord = parseInt(event.target.getAttribute("data"));
    const ycoord = parseInt(event.target.parentElement.getAttribute("data"));
    const coords = [xcoord, ycoord];

    // update local game state
    gameState[playerToken].push(coords);

    // send gamestate to server
    makeMove(gameState);
  })



  $("#test").on('click', getGameData);
  $('#makeNew').on('click', makeNewGame);



// run this function to get a game if there is a session variable set
getGameData();

const timer = setInterval(getGameData, 5000);



})
</script>